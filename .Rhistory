min(dd)
max(dd)
d <- rnorm(30,1)
d
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
listy <- list("bb" = rnorm(), 'aa' = rnorm())
listy <- list("bb" = rnorm(), 'aa' = rnorm())
listy <- list("bb" = rnorm(n=30), 'aa' = rnorm(n=99))
listy$bb
listy[["bb"]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# The below code includes 'if else' statements that might appear unnecessary (e.g., 'if(TRUE){}').
# These are the result of gmShiny pulling information from settings and other dependencies within the app to
# fill in T/F statements as is appropriate for your data and current settings.
setwd("~/Downloads/symmetry-2022-02-15-13/")
rm(list = ls())
load("data_current_state.RData")
vals <- vals2
library(geomorph)
shinyalert <- function(title, text, html, size) {
print(title)
print(text) } # This function turns the pop up messages available in gmShiny into R console text. This will only appear if some sort of error is made.
if (!is.null(vals$run_symmetry_go)) {
if (is.null(vals$run_symmetry_go_tracker)) {
vals$run_symmetry_go_tracker <- 0
}
if (vals$run_symmetry_go != vals$run_symmetry_go_tracker) {
vals$run_symmetry_go_tracker <- vals$run_symmetry_go
req(gpa_coords_rx())
gpa_coords <- gpa_coords_rx()
vals$sym_def_df <- as.data.frame(input$symmetry_definitions)
vals$symmetry_land_pairs <- input$symmetry_landpairs_definitions
symmetry_replicate <- vals$sym_def_df$Rep
if (length(which(symmetry_replicate == "")) > 0) {
symmetry_replicate <- symmetry_replicate[-which(symmetry_replicate == "")]
}
symmetry_ind <- vals$sym_def_df$Indiv
if (length(which(symmetry_ind == "")) > 0) {
symmetry_ind <- symmetry_ind[-which(symmetry_ind == "")]
}
if (vals$sym_def_df[nrow(vals$sym_def_df), 1] == "") {
vals$sym_def_df <- vals$sym_def_df[-nrow(vals$sym_def_df), ]
}
error1 <- length(symmetry_ind)/dim(gpa_coords)[3] != round(length(symmetry_ind)/dim(gpa_coords)[3])
if ("TRUE") {
error2_df <- paste(vals$sym_def_df$Indiv, vals$sym_def_df$Rep)
error2 <- length(unique(error2_df)) != length(error2_df)
}         else {
error2_df <- paste(vals$sym_def_df$Indiv, vals$sym_def_df$Rep, vals$sym_def_df$Side)
error2 <- length(unique(error2_df)) != length(error2_df)
}
error3 <- anyNA(match(dimnames(gpa_coords)[[3]], rownames(vals$sym_def_df)))
error4 <- anyNA(match(rownames(vals$sym_def_df), dimnames(gpa_coords)[[3]]))
if (any(error1, error2, error3, error4)) {
shinyalert(title = "Error in Specimen Assignments", text = "Some component of the specimen assignment data is in the incorrect format. Please check the Specimen Assignments matrix for errors. \n            <br><br>Some common issues are improperly \n          labeling replicates within each individual, leaving some values blank, or a mismatch between the row names\n          and the labels for the shape dataset.", html = T, type = "error")
}         else {
if ("TRUE" == F) {
symmetry_side <- vals$sym_def_df$Side
gdf <- geomorph.data.frame(shape = gpa_coords, ind = symmetry_ind, side = symmetry_side, replicate = symmetry_replicate)
}             else {
side <- NULL
gdf <- geomorph.data.frame(shape = gpa_coords, ind = symmetry_ind, replicate = symmetry_replicate)
symmetry_land_pairs <- vals$symmetry_land_pairs
symmetry_land_pairs[, 1] <- as.numeric(symmetry_land_pairs[, 1])
symmetry_land_pairs[, 2] <- as.numeric(symmetry_land_pairs[, 2])
symmetry_land_pairs <- symmetry_land_pairs[complete.cases(symmetry_land_pairs), ]
symmetry_land_pairs <- matrix(symmetry_land_pairs, ncol = 2)
}
if ("TRUE" == F) {
error1 <- any(!(c(1, 2) %in% symmetry_side))
error2 <- any(!(symmetry_side %in% c(1, 2)))
error3 <- length(symmetry_side) != length(symmetry_ind)
if (any(error1, error2, error3)) {
shinyalert(title = "Error in Side Assignments", text = "Some component of the side assignment data is in the incorrect format. Some possible errors include:\n  labeling a specimen with any label other than '1' or '2', an incomplete Specimen Assignments matrix, \n  or not assigning any specimens to one of the sides.", html = T, type = "error")
}                 else {
if ("FALSE" == F) {
vals$bilat_symmetry <- bilat.symmetry(A = vals$Data_gpa, ind = ind, side = side, replicate = replicate, land.pairs = symmetry_land_pairs, object.sym = as.logical("TRUE"), iter = 999L, data = gdf, print.progress = F)
}                   else {
vals$bilat_symmetry <- bilat.symmetry(A = shape, ind = ind, side = side, replicate = replicate, land.pairs = symmetry_land_pairs, object.sym = as.logical("TRUE"), iter = 999L, data = gdf, print.progress = F)
}
}
}             else {
symmetry_land_pairs_fac <- as.factor(symmetry_land_pairs)
error1 <- length(symmetry_land_pairs_fac)/2 != round(length(symmetry_land_pairs_fac)/2)
error2 <- any(!(symmetry_land_pairs_fac %in% 1:dim(gpa_coords)[1]))
error3 <- length(symmetry_land_pairs_fac) != length(unique(symmetry_land_pairs_fac))
if (any(error1, error2, error3)) {
shinyalert(title = "Error in Landmark Side Assignments", text = "Some component of the landmark side assignment data is in the incorrect format. \n              Some possible errors include: a landmark number not available in the dataset assigned to either side (e.g., \n              LM 14 assigned to Side 1 when only 11 LMs exist), a landmark is repeated in the Landmark Side Assignments matrix,\n              or one or more landmarks does not have a matched landmark on the other side.",
html = T, type = "error")
}                 else {
if ("FALSE" == F) {
vals$bilat_symmetry <- bilat.symmetry(A = vals$Data_gpa, ind = ind, side = side, replicate = replicate, land.pairs = symmetry_land_pairs, object.sym = as.logical("TRUE"), iter = 999L, data = gdf, print.progress = F)
}                   else {
vals$bilat_symmetry <- bilat.symmetry(A = shape, ind = ind, side = side, replicate = replicate, land.pairs = symmetry_land_pairs, object.sym = as.logical("TRUE"), iter = 999L, data = gdf, print.progress = F)
}
}
}
}
}
} else {
vals$bilat_symmetry <- NULL
}
plot(vals$bilat_symmetry)
summary(vals$bilat_symmetry)
summary(vals$bilat_symmetry)
vals$bilat_symmetry$signed.AI
vals$bilat_symmetry$unsigned.AI
runApp('~/Documents/Work/Projects/gmShiny-published')
runApp('~/Documents/Work/Projects/gmShiny-published')
# The below code includes 'if else' statements that might appear unnecessary (e.g., 'if(TRUE){}').
# These are the result of gmShiny pulling information from settings and other dependencies within the app to
# fill in T/F statements as is appropriate for your data and current settings.
setwd("~/Downloads/morphospace-2022-02-15/")
# Legends can also be added to the morphospace plot using the 'legend' function from the graphics package.
rm(list = ls())
load("data_current_state.RData")
vals <- vals2
library(geomorph)
pr <- pca_rx
class(pr) <- "ordinate"
if (!is.null(vals$tip_pch)) {
input_pch <- as.numeric(vals$tip_pch)
} else {
input_pch <- 19
}
pr.plot <- RRPP:::plot.ordinate(pr, axis1 = as.numeric("3"), axis2 = as.numeric("6"), pch = input_pch, cex = as.numeric(3L), col = vals$tip_col, asp = 1)
abline(h = 0, lty = 2)
abline(v = 0, lty = 2)
if (TRUE) {
z <- vals$morphospace$phylo$phy.pcdata
edges <- as.matrix(vals$phy_rx$edge)
for (i in 1:NROW(edges)) {
pts <- z[edges[i, ], ]
points(pts, type = "l", col = "black", lwd = as.numeric(1L), lty = 1)
}
ancs <- z[(length(vals$phy_rx$tip.label) + 1):nrow(z), ]
points(ancs, pch = as.numeric("19"), cex = as.numeric(1L), col = "#737373")
if (FALSE) {
text(ancs, rownames(ancs), adj = c(-(1L)/15, -(1L)/15), cex = as.numeric(1L), col = "#737373")
}
}
if (TRUE) {
text(pr.plot$points, rownames(pr.plot$points), adj = c(-(3L)/15, -(3L)/15), cex = as.numeric(1L), col = vals$tip_col)
}
if (!is.null(vals$morpho_clicked)) {
if (FALSE | FALSE) {
x_start <- vals$specimen_row_ref[, as.numeric("3")]
y_start <- vals$specimen_row_ref[, as.numeric("6")]
points(x = x_start, y = y_start, col = "red", cex = as.numeric(3L) + 1.2, pch = 1)
}
if ("selected_obs" == "selected_obs" | FALSE) {
x_end <- vals$specimen_row_targ[, as.numeric("3")]
y_end <- vals$specimen_row_targ[, as.numeric("6")]
points(x = x_end, y = y_end, col = "red", cex = as.numeric(3L) + 1, pch = 1)
}
}
if (!is.null(vals$morpho_dbclicked)) {
x_proj <- vals$projection_row[1]
y_proj <- vals$projection_row[2]
points(x = x_proj, y = y_proj, col = "red", cex = as.numeric(3L) + 1, pch = 4)
}
if (TRUE == TRUE & exists("x_end")) {
if (!is.null("selected_obs")) {
if ("mean" == "mean") {
start.xy <- c(0, 0)
}
if ("mean" == "selected_proj") {
start.xy <- c(x_proj, y_proj)
}
if ("mean" == "selected_obs" | "mean" == "selected_obs_byname") {
start.xy <- c(x_start, y_start)
}
if ("selected_obs" == "mean") {
end.xy <- c(0, 0)
}
if ("selected_obs" == "selected_proj") {
end.xy <- c(x_proj, y_proj)
}
if ("selected_obs" == "selected_obs" | "selected_obs" == "selected_obs_byname") {
end.xy <- c(x_end, y_end)
}
arrows(x0 = start.xy[1], y0 = start.xy[2], x1 = end.xy[1], y1 = end.xy[2], col = "red", lty = 1, lwd = 2)
}
}
if (FALSE | FALSE | FALSE) {
selected_trait <- (2:4)[c(FALSE, FALSE, FALSE)]
colored_tips <- (2:4)[c("all_1_col" == "by_trait_1", "all_1_col" == "by_trait_2", "all_1_col" == "by_trait_3")]
col_list_modified <- list(vals$color_options_list$hull1, vals$color_options_list$hull2, vals$color_options_list$tips)
if (length(colored_tips) == 0) {
col_list_modified <- list(vals$color_options_list$hull1, vals$color_options_list$hull2, vals$color_options_list$hull3)
}
if (length(colored_tips) > 0) {
if (colored_tips == selected_trait[1]) {
col_list_modified <- list(vals$color_options_list$tips, vals$color_options_list$hull1, vals$color_options_list$hull2)
}         else {
if (length(selected_trait) > 1) {
if (colored_tips == selected_trait[2]) {
col_list_modified <- list(vals$color_options_list$hull1, vals$color_options_list$tips, vals$color_options_list$hull2)
}
}
}
}
for (i in 1:length(selected_trait)) {
this_col <- selected_trait[i]
tip_col_fac <- as.character(vals$trait_rx[match(dimnames(gpa_coords)[[3]], vals$trait_rx[, 1]), this_col])
lev <- length(unique(tip_col_fac))
lev_options <- unique(tip_col_fac)
col_mat <- unlist(col_list_modified[[i]])
for (j in 1:length(unique(tip_col_fac))) {
reordered_edges <- pr$x[which(tip_col_fac == lev_options[j]), c(as.numeric("3"), as.numeric("6"))]
edge_points <- row.names(reordered_edges)[chull(reordered_edges)]
polygon(x = pr$x[edge_points, as.numeric("3")], y = pr$x[edge_points, as.numeric("6")], col = adjustcolor(col_mat[j], alpha.f = 0.5), border = col_mat[j])
}
}
if (FALSE | FALSE | FALSE) {
selected_trait <- (2:4)[c(FALSE, FALSE, FALSE)]
colored_tips <- (2:4)[c("all_1_col" == "by_trait_1", "all_1_col" == "by_trait_2", "all_1_col" == "by_trait_3")]
col_list_modified <- list(vals$color_options_list$hull1, vals$color_options_list$hull2, vals$color_options_list$tips)
if (length(colored_tips) == 0) {
col_list_modified <- list(vals$color_options_list$hull1, vals$color_options_list$hull2, vals$color_options_list$hull3)
}
if (length(colored_tips) > 0) {
if (colored_tips == selected_trait[1]) {
col_list_modified <- list(vals$color_options_list$tips, vals$color_options_list$hull1, vals$color_options_list$hull2)
}         else {
if (length(selected_trait) > 1) {
if (colored_tips == selected_trait[2]) {
col_list_modified <- list(vals$color_options_list$hull1, vals$color_options_list$tips, vals$color_options_list$hull2)
}
}
}
}
for (i in 1:length(selected_trait)) {
this_col <- selected_trait[i]
tip_col_fac <- as.character(vals$trait_rx[match(dimnames(gpa_coords)[[3]], vals$trait_rx[, 1]), this_col])
lev <- length(unique(tip_col_fac))
lev_options <- unique(tip_col_fac)
col_mat <- unlist(col_list_modified[[i]])
for (j in 1:length(unique(tip_col_fac))) {
reordered_edges <- pr$x[which(tip_col_fac == lev_options[j]), c(as.numeric("3"), as.numeric("6"))]
edge_points <- row.names(reordered_edges)[chull(reordered_edges)]
polygon(x = pr$x[edge_points, as.numeric("3")], y = pr$x[edge_points, as.numeric("6")], col = adjustcolor(col_mat[j], alpha.f = 0.5), border = col_mat[j])
}
}
}
}
# Notes:
# Before running any of the below code, set your working directory to wherever the .RData file exists. Without having moved it yourself,
# this will be in the unzipped folder. The function 'setwd()' can be used for this step.
# The below code includes 'if else' statements that might appear unnecessary (e.g., 'if(TRUE){}').
# These are the result of gmShiny pulling information from settings and other dependencies within the app to
# fill in T/F statements as is appropriate for your data and current settings.
setwd("~/Downloads/morphospace-2022-02-15/")
# Legends can also be added to the morphospace plot using the 'legend' function from the graphics package.
rm(list = ls())
load("data_current_state.RData")
vals <- vals2
library(geomorph)
pr <- pca_rx
class(pr) <- "ordinate"
if (!is.null(vals$tip_pch)) {
input_pch <- as.numeric(vals$tip_pch)
} else {
input_pch <- 19
}
pr.plot <- RRPP:::plot.ordinate(pr, axis1 = as.numeric("3"), axis2 = as.numeric("6"), pch = input_pch, cex = as.numeric(3L), col = vals$tip_col, asp = 1)
abline(h = 0, lty = 2)
abline(v = 0, lty = 2)
if (TRUE) {
z <- vals$morphospace$phylo$phy.pcdata
edges <- as.matrix(vals$phy_rx$edge)
for (i in 1:NROW(edges)) {
pts <- z[edges[i, ], ]
points(pts, type = "l", col = "black", lwd = as.numeric(1L), lty = 1)
}
ancs <- z[(length(vals$phy_rx$tip.label) + 1):nrow(z), ]
points(ancs, pch = as.numeric("19"), cex = as.numeric(1L), col = "#737373")
if (FALSE) {
text(ancs, rownames(ancs), adj = c(-(1L)/15, -(1L)/15), cex = as.numeric(1L), col = "#737373")
}
}
if (TRUE) {
text(pr.plot$points, rownames(pr.plot$points), adj = c(-(3L)/15, -(3L)/15), cex = as.numeric(1L), col = vals$tip_col)
}
if (!is.null(vals$morpho_clicked)) {
if (FALSE | FALSE) {
x_start <- vals$specimen_row_ref[, as.numeric("3")]
y_start <- vals$specimen_row_ref[, as.numeric("6")]
points(x = x_start, y = y_start, col = "red", cex = as.numeric(3L) + 1.2, pch = 1)
}
if ("selected_obs" == "selected_obs" | FALSE) {
x_end <- vals$specimen_row_targ[, as.numeric("3")]
y_end <- vals$specimen_row_targ[, as.numeric("6")]
points(x = x_end, y = y_end, col = "red", cex = as.numeric(3L) + 1, pch = 1)
}
}
if (!is.null(vals$morpho_dbclicked)) {
x_proj <- vals$projection_row[1]
y_proj <- vals$projection_row[2]
points(x = x_proj, y = y_proj, col = "red", cex = as.numeric(3L) + 1, pch = 4)
}
if (TRUE == TRUE & exists("x_end")) {
if (!is.null("selected_obs")) {
if ("mean" == "mean") {
start.xy <- c(0, 0)
}
if ("mean" == "selected_proj") {
start.xy <- c(x_proj, y_proj)
}
if ("mean" == "selected_obs" | "mean" == "selected_obs_byname") {
start.xy <- c(x_start, y_start)
}
if ("selected_obs" == "mean") {
end.xy <- c(0, 0)
}
if ("selected_obs" == "selected_proj") {
end.xy <- c(x_proj, y_proj)
}
if ("selected_obs" == "selected_obs" | "selected_obs" == "selected_obs_byname") {
end.xy <- c(x_end, y_end)
}
arrows(x0 = start.xy[1], y0 = start.xy[2], x1 = end.xy[1], y1 = end.xy[2], col = "red", lty = 1, lwd = 2)
}
}
if (FALSE | FALSE | FALSE) {
selected_trait <- (2:4)[c(FALSE, FALSE, FALSE)]
colored_tips <- (2:4)[c("all_1_col" == "by_trait_1", "all_1_col" == "by_trait_2", "all_1_col" == "by_trait_3")]
col_list_modified <- list(vals$color_options_list$hull1, vals$color_options_list$hull2, vals$color_options_list$tips)
if (length(colored_tips) == 0) {
col_list_modified <- list(vals$color_options_list$hull1, vals$color_options_list$hull2, vals$color_options_list$hull3)
}
if (length(colored_tips) > 0) {
if (colored_tips == selected_trait[1]) {
col_list_modified <- list(vals$color_options_list$tips, vals$color_options_list$hull1, vals$color_options_list$hull2)
}         else {
if (length(selected_trait) > 1) {
if (colored_tips == selected_trait[2]) {
col_list_modified <- list(vals$color_options_list$hull1, vals$color_options_list$tips, vals$color_options_list$hull2)
}
}
}
}
for (i in 1:length(selected_trait)) {
this_col <- selected_trait[i]
tip_col_fac <- as.character(vals$trait_rx[match(dimnames(gpa_coords)[[3]], vals$trait_rx[, 1]), this_col])
lev <- length(unique(tip_col_fac))
lev_options <- unique(tip_col_fac)
col_mat <- unlist(col_list_modified[[i]])
for (j in 1:length(unique(tip_col_fac))) {
reordered_edges <- pr$x[which(tip_col_fac == lev_options[j]), c(as.numeric("3"), as.numeric("6"))]
edge_points <- row.names(reordered_edges)[chull(reordered_edges)]
polygon(x = pr$x[edge_points, as.numeric("3")], y = pr$x[edge_points, as.numeric("6")], col = adjustcolor(col_mat[j], alpha.f = 0.5), border = col_mat[j])
}
}
}
# The below code includes 'if else' statements that might appear unnecessary (e.g., 'if(TRUE){}').
# These are the result of gmShiny pulling information from settings and other dependencies within the app to
# fill in T/F statements as is appropriate for your data and current settings.
setwd("~/Downloads/morphospace-2022-02-15-2/")
rm(list = ls())
load("data_current_state.RData")
vals <- vals2
library(geomorph)
pr <- pca_rx
class(pr) <- "ordinate"
if (!is.null(vals$tip_pch)) {
input_pch <- as.numeric(vals$tip_pch)
} else {
input_pch <- 19
}
pr.plot <- RRPP:::plot.ordinate(pr, axis1 = as.numeric("4"), axis2 = as.numeric("2"), pch = input_pch, cex = as.numeric(2.1), col = vals$tip_col, asp = 1)
abline(h = 0, lty = 2)
abline(v = 0, lty = 2)
if (TRUE) {
z <- vals$morphospace$phylo$phy.pcdata
edges <- as.matrix(vals$phy_rx$edge)
for (i in 1:NROW(edges)) {
pts <- z[edges[i, ], ]
points(pts, type = "l", col = "black", lwd = as.numeric(1L), lty = 1)
}
ancs <- z[(length(vals$phy_rx$tip.label) + 1):nrow(z), ]
points(ancs, pch = as.numeric("19"), cex = as.numeric(1L), col = "#737373")
if (FALSE) {
text(ancs, rownames(ancs), adj = c(-(1L)/15, -(1L)/15), cex = as.numeric(1L), col = "#737373")
}
}
if (TRUE) {
text(pr.plot$points, rownames(pr.plot$points), adj = c(-(2.1)/15, -(2.1)/15), cex = as.numeric(1L), col = vals$tip_col)
}
if (!is.null(vals$morpho_clicked)) {
if (FALSE | FALSE) {
x_start <- vals$specimen_row_ref[, as.numeric("4")]
y_start <- vals$specimen_row_ref[, as.numeric("2")]
points(x = x_start, y = y_start, col = "red", cex = as.numeric(2.1) + 1.2, pch = 1)
}
if ("selected_obs" == "selected_obs" | FALSE) {
x_end <- vals$specimen_row_targ[, as.numeric("4")]
y_end <- vals$specimen_row_targ[, as.numeric("2")]
points(x = x_end, y = y_end, col = "red", cex = as.numeric(2.1) + 1, pch = 1)
}
}
if (!is.null(vals$morpho_dbclicked)) {
x_proj <- vals$projection_row[1]
y_proj <- vals$projection_row[2]
points(x = x_proj, y = y_proj, col = "red", cex = as.numeric(2.1) + 1, pch = 4)
}
if (TRUE == TRUE & exists("x_end")) {
if (!is.null("selected_obs")) {
if ("mean" == "mean") {
start.xy <- c(0, 0)
}
if ("mean" == "selected_proj") {
start.xy <- c(x_proj, y_proj)
}
if ("mean" == "selected_obs" | "mean" == "selected_obs_byname") {
start.xy <- c(x_start, y_start)
}
if ("selected_obs" == "mean") {
end.xy <- c(0, 0)
}
if ("selected_obs" == "selected_proj") {
end.xy <- c(x_proj, y_proj)
}
if ("selected_obs" == "selected_obs" | "selected_obs" == "selected_obs_byname") {
end.xy <- c(x_end, y_end)
}
arrows(x0 = start.xy[1], y0 = start.xy[2], x1 = end.xy[1], y1 = end.xy[2], col = "red", lty = 1, lwd = 2)
}
}
if (FALSE | FALSE | FALSE) {
selected_trait <- (2:4)[c(FALSE, FALSE, FALSE)]
colored_tips <- (2:4)[c("all_1_col" == "by_trait_1", "all_1_col" == "by_trait_2", "all_1_col" == "by_trait_3")]
col_list_modified <- list(vals$color_options_list$hull1, vals$color_options_list$hull2, vals$color_options_list$tips)
if (length(colored_tips) == 0) {
col_list_modified <- list(vals$color_options_list$hull1, vals$color_options_list$hull2, vals$color_options_list$hull3)
}
if (length(colored_tips) > 0) {
if (colored_tips == selected_trait[1]) {
col_list_modified <- list(vals$color_options_list$tips, vals$color_options_list$hull1, vals$color_options_list$hull2)
}         else {
if (length(selected_trait) > 1) {
if (colored_tips == selected_trait[2]) {
col_list_modified <- list(vals$color_options_list$hull1, vals$color_options_list$tips, vals$color_options_list$hull2)
}
}
}
}
for (i in 1:length(selected_trait)) {
this_col <- selected_trait[i]
tip_col_fac <- as.character(vals$trait_rx[match(dimnames(gpa_coords)[[3]], vals$trait_rx[, 1]), this_col])
lev <- length(unique(tip_col_fac))
lev_options <- unique(tip_col_fac)
col_mat <- unlist(col_list_modified[[i]])
for (j in 1:length(unique(tip_col_fac))) {
reordered_edges <- pr$x[which(tip_col_fac == lev_options[j]), c(as.numeric("4"), as.numeric("2"))]
edge_points <- row.names(reordered_edges)[chull(reordered_edges)]
polygon(x = pr$x[edge_points, as.numeric("4")], y = pr$x[edge_points, as.numeric("2")], col = adjustcolor(col_mat[j], alpha.f = 0.5), border = col_mat[j])
}
}
}
runApp('~/Documents/Work/Projects/gmShiny-published')
runApp('~/Documents/Work/Projects/gmShiny-published')
runApp('~/Documents/Work/Projects/gmShiny-published')
runApp('~/Documents/Work/Projects/gmShiny-published')
shiny::runApp()
devtools::install_version("geomorph", version = "4.0.1")
shiny::runApp()
runApp()
shiny::runApp()
